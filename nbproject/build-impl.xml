<?xml version="1.0" encoding="UTF-8"?>
<!--
*** GENERATED FROM project.xml - DO NOT EDIT  ***
***         EDIT ../build.xml INSTEAD         ***

For the purpose of easier reading the script
is divided into following sections:

  - initialization
  - compilation
  - jar
  - execution
  - debugging
  - javadoc
  - junit compilation
  - junit execution
  - junit debugging
  - applet
  - cleanup

        -->
<project xmlns:j2seproject1="http://www.netbeans.org/ns/j2se-project/1" xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3" xmlns:jaxrpc="http://www.netbeans.org/ns/j2se-project/jax-rpc" basedir=".." default="default" name="Robin2-impl">
    <target depends="test,jar,javadoc" description="Build and test whole project." name="default"/>
    <!-- 
                ======================
                INITIALIZATION SECTION 
                ======================
            -->
    <target name="-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->        
    </target>
    <target depends="-pre-init" name="-init-private">
        <property file="nbproject/private/config.properties"/>
        <property file="nbproject/private/configs/${config}.properties"/>
        <property file="nbproject/private/private.properties"/>
    </target>
    <target depends="-pre-init,-init-private" name="-init-user">
        <property file="${user.properties.file}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="1.4"/>
        <property name="default.javac.target" value="1.4"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user" name="-init-project">
        <property file="nbproject/configs/${config}.properties"/>
        <property file="nbproject/project.properties"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property" name="-do-init">
        <available file="${manifest.file}" property="manifest.available"/>
        <condition property="manifest.available+main.class">
            <and>
                <isset property="manifest.available"/>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="manifest.available+main.class+mkdist.available">
            <and>
                <istrue value="${manifest.available+main.class}"/>
                <isset property="libs.CopyLibs.classpath"/>
            </and>
        </condition>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <and>
                <isset property="javadoc.preview"/>
                <isfalse value="${javadoc.preview}"/>
            </and>
        </condition>
        <property name="run.jvmargs" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <property name="javac.debug" value="true"/>
        <property name="javadoc.preview" value="true"/>
        <property name="application.args" value=""/>
        <property name="source.encoding" value="${file.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <property name="do.depend" value="false"/>
        <condition property="do.depend.true">
            <istrue value="${do.depend}"/>
        </condition>
        <condition else="" property="javac.compilerargs.jaxws" value="-Djava.endorsed.dirs='${jaxws.endorsed.dir}'">
            <and>
                <isset property="jaxws.endorsed.dir"/>
                <available file="nbproject/jaxws-build.xml"/>
            </and>
        </condition>
    </target>
    <target name="-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-do-init" name="-init-check">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    <target name="-init-macrodef-property">
        <macrodef name="property" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${@{value}}"/>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-javac">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="" name="sourcepath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" includeantruntime="false" includes="@{includes}" source="${javac.source}" sourcepath="@{sourcepath}" srcdir="@{srcdir}" target="${javac.target}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${javac.compilerargs} ${javac.compilerargs.jaxws}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
        <macrodef name="depend" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <sequential>
                <depend cache="${build.dir}/depcache" destdir="@{destdir}" excludes="${excludes}" includes="${includes}" srcdir="@{srcdir}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </depend>
            </sequential>
        </macrodef>
        <macrodef name="force-recompile" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${build.classes.dir}" name="destdir"/>
            <sequential>
                <fail unless="javac.includes">Must set javac.includes</fail>
                <pathconvert pathsep="," property="javac.includes.binary">
                    <path>
                        <filelist dir="@{destdir}" files="${javac.includes}"/>
                    </path>
                    <globmapper from="*.java" to="*.class"/>
                </pathconvert>
                <delete>
                    <files includes="${javac.includes.binary}"/>
                </delete>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <sequential>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg line="${run.jvmargs}"/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-nbjpda">
        <macrodef name="nbjpdastart" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${main.class}" name="name"/>
            <attribute default="${debug.classpath}" name="classpath"/>
            <attribute default="" name="stopclassname"/>
            <sequential>
                <nbjpdastart addressproperty="jpda.address" name="@{name}" stopclassname="@{stopclassname}" transport="dt_socket">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </nbjpdastart>
            </sequential>
        </macrodef>
        <macrodef name="nbjpdareload" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${build.classes.dir}" name="dir"/>
            <sequential>
                <nbjpdareload>
                    <fileset dir="@{dir}" includes="${fix.classes}">
                        <include name="${fix.includes}*.class"/>
                    </fileset>
                </nbjpdareload>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-debug-args">
        <property name="version-output" value="java version &quot;${ant.java.version}"/>
        <condition property="have-jdk-older-than-1.4">
            <or>
                <contains string="${version-output}" substring="java version &quot;1.0"/>
                <contains string="${version-output}" substring="java version &quot;1.1"/>
                <contains string="${version-output}" substring="java version &quot;1.2"/>
                <contains string="${version-output}" substring="java version &quot;1.3"/>
            </or>
        </condition>
        <condition else="-Xdebug" property="debug-args-line" value="-Xdebug -Xnoagent -Djava.compiler=none">
            <istrue value="${have-jdk-older-than-1.4}"/>
        </condition>
    </target>
    <target depends="-init-debug-args" name="-init-macrodef-debug">
        <macrodef name="debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${debug.classpath}" name="classpath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" fork="true">
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${main.class}" name="classname"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" fork="true">
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="${run.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-presetdef-jar">
        <presetdef name="jar" uri="http://www.netbeans.org/ns/j2se-project/1">
            <jar compress="${jar.compress}" jarfile="${dist.jar}">
                <j2seproject1:fileset dir="${build.classes.dir}"/>
            </jar>
        </presetdef>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-junit,-init-macrodef-nbjpda,-init-macrodef-debug,-init-macrodef-java,-init-presetdef-jar" name="init"/>
    <!--
                ===================
                COMPILATION SECTION
                ===================
            -->
    <target depends="init" name="deps-jar" unless="no.deps"/>
    <target depends="init,deps-jar" name="-pre-pre-compile">
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-pre-compile">
    	<!-- FIXME: Dont modify things under src -->
        <buildnumber file="src/de/mpimp/golm/robin/build.number"/> 
        
        <property name="version.number" value="1.2.3" />
        
        <copy file="Version.template" tofile="${src.dir}/de/mpimp/golm/robin/Version.properties" overwrite="true" />
        <replace file="${src.dir}/de/mpimp/golm/robin/Version.properties" token="#VERSION#" value="${version.number}_build${build.number}"/>
        
        <copy file="RELEASE_NOTES_TEMPLATE.html" tofile="${src.dir}/de/mpimp/golm/robin/RELEASE_NOTES.html" overwrite="true" />
        <replace file="${src.dir}/de/mpimp/golm/robin/RELEASE_NOTES.html" token="#VERSION#" value="${version.number}_build${build.number}"/>
        
       <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="do.depend.true" name="-compile-depend">
        <j2seproject3:depend/>
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile,-compile-depend" if="have.sources" name="-do-compile">
        <j2seproject3:javac/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile,-do-compile,-post-compile" description="Compile project." name="compile"/>
    <target name="-pre-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-pre-pre-compile" name="-do-compile-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <j2seproject3:force-recompile/>
        <j2seproject3:javac excludes="" includes="${javac.includes}" sourcepath="${src.dir}"/>
    </target>
    <target name="-post-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
        
        
        
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single" name="compile-single"/>
    <!--
                ====================
                JAR BUILDING SECTION
                ====================
            -->
    <target depends="init" name="-pre-pre-jar">
        <dirname file="${dist.jar}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
    </target>
    <target name="-pre-jar">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-jar,-pre-jar" name="-do-jar-without-manifest" unless="manifest.available">
        <j2seproject1:jar/>
    </target>
    <target depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available" name="-do-jar-with-manifest" unless="manifest.available+main.class">
        <j2seproject1:jar manifest="${manifest.file}"/>
    </target>
    <target depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class" name="-do-jar-with-mainclass" unless="manifest.available+main.class+mkdist.available">
        <j2seproject1:jar manifest="${manifest.file}">
            <j2seproject1:manifest>
                <j2seproject1:attribute name="Main-Class" value="${main.class}"/>
            </j2seproject1:manifest>
        </j2seproject1:jar>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <pathconvert property="run.classpath.with.dist.jar">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to="${dist.jar.resolved}"/>
        </pathconvert>
        <echo>java -cp "${run.classpath.with.dist.jar}" ${main.class}</echo>
    </target>
    <target depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class+mkdist.available" name="-do-jar-with-libraries">
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <pathconvert property="run.classpath.without.build.classes.dir">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to=""/>
        </pathconvert>
        <pathconvert pathsep=" " property="jar.classpath">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>
        <taskdef classname="org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs" classpath="${libs.CopyLibs.classpath}" name="copylibs"/>
        <copylibs compress="${jar.compress}" jarfile="${dist.jar}" manifest="${manifest.file}" runtimeclasspath="${run.classpath.without.build.classes.dir}">
            <fileset dir="${build.classes.dir}"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </copylibs>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <echo>java -jar "${dist.jar.resolved}"</echo>
    </target>
	
	
    <target name="-post-jar" depends="init,compile,-pre-pre-jar,-pre-jar">
         <!-- copy all external stuff like mappings, bin, index and a link to R into
            the dist directory for faster testing -->
        <echo>Copy layout presets into distribution</echo>
        <property name="presets-source" value="presets"/> 
        <property name="presets-target" value="${dist.jar.dir}/lib/presets/"/>
<!--
    	<copy todir="${presets-target}">
            <fileset dir="${presets-source}"/>
        </copy>
        -->
    	
        <echo>Copy quaqua native lib for MacOS X</echo>
        <property name="libquaqua-source" value="lib/"/> 
        <property name="libquaqua-target" value="dist/lib/"/>
        <copy file="${libquaqua-source}libquaqua.jnilib" todir="${libquaqua-target}" />


        <!-- THIS SECTION IS NEEDED FOR TESTING 
             HAS TO BE DEACTIVATED FOR RELEASE BUILDS -->
    	
<!--    	
        <copy todir="${dist.jar.dir}/mappings">
            <fileset dir="mappings"/>
        </copy>
        <copy todir="${dist.jar.dir}/presets">
            <fileset dir="presets"/>
        </copy>        
        <copy todir="${dist.jar.dir}/bin">
            <fileset dir="bin"/>
        </copy> 
        <copy todir="${dist.jar.dir}/index">
            <fileset dir="index"/>
        </copy> 
    -->
    	
    	<!--
        <symlink link="${dist.jar.dir}/mappings" resource="../mappings" failonerror="false"/>
    	<symlink link="${dist.jar.dir}/presets" resource="../presets" failonerror="false"/>
    	<symlink link="${dist.jar.dir}/bin" resource="../bin" failonerror="false"/>
        <symlink link="${dist.jar.dir}/index" resource="../index" failonerror="false"/>
    	                
        <chmod dir="${dist.jar.dir}/bin" perm="755" 
            includes="**/*"/>
        -->
    	
        <!-- link to system's R -->
        
    	<mkdir dir="${dist.jar.dir}/R"/>
        <mkdir dir="${dist.jar.dir}/R/bin"/>
        <symlink link="${dist.jar.dir}/R/bin/R" resource="/usr/bin/R" failonerror="false"/>
        
    	
        <!-- TESTING SECTION END -->

    	
    	
    </target>
    <target depends="init,compile,-pre-jar,-do-jar-with-manifest,-do-jar-without-manifest,-do-jar-with-mainclass,-do-jar-with-libraries,-post-jar" description="Build JAR." name="jar"/>
    <!--
                =================
                EXECUTION SECTION
                =================
            -->
    <target depends="init,compile" description="Run a main class." name="run">
        <j2seproject1:java>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </j2seproject1:java>
    </target>
    <target name="-do-not-recompile">
        <property name="javac.includes.binary" value=""/>
    </target>
    <target depends="init,-do-not-recompile,compile-single" name="run-single">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <j2seproject1:java classname="${run.class}"/>
    </target>
    <!--
                =================
                DEBUGGING SECTION
                =================
            -->
    <target depends="init" if="netbeans.home" name="-debug-start-debugger">
        <j2seproject1:nbjpdastart name="${debug.class}"/>
    </target>
    <target depends="init,compile" name="-debug-start-debuggee">
        <j2seproject3:debug>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target depends="init,compile,-debug-start-debugger,-debug-start-debuggee" description="Debug project in IDE." if="netbeans.home" name="debug"/>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger-stepinto">
        <j2seproject1:nbjpdastart stopclassname="${main.class}"/>
    </target>
    <target depends="init,compile,-debug-start-debugger-stepinto,-debug-start-debuggee" if="netbeans.home" name="debug-stepinto"/>
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-single">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <j2seproject3:debug classname="${debug.class}"/>
    </target>
    <target depends="init,-do-not-recompile,compile-single,-debug-start-debugger,-debug-start-debuggee-single" if="netbeans.home" name="debug-single"/>
    <target depends="init" name="-pre-debug-fix">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target depends="init,-pre-debug-fix,compile-single" if="netbeans.home" name="-do-debug-fix">
        <j2seproject1:nbjpdareload/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix" if="netbeans.home" name="debug-fix"/>
    <!--
                ===============
                JAVADOC SECTION
                ===============
            -->
    <target depends="init" name="-javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
        </javadoc>
    </target>
    <target depends="init,-javadoc-build" if="netbeans.home" name="-javadoc-browse" unless="no.javadoc.preview">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target depends="init,-javadoc-build,-javadoc-browse" description="Build Javadoc." name="javadoc"/>
    <!--
                =========================
                JUNIT COMPILATION SECTION
                =========================
            -->
    <target depends="init,compile" if="have.tests" name="-pre-pre-compile-test">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    <target name="-pre-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="do.depend.true" name="-compile-test-depend">
        <j2seproject3:depend classpath="${javac.test.classpath}" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-compile-test-depend" if="have.tests" name="-do-compile-test">
        <j2seproject3:javac classpath="${javac.test.classpath}" debug="true" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test" name="compile-test"/>
    <target name="-pre-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single" if="have.tests" name="-do-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <j2seproject3:force-recompile destdir="${build.test.classes.dir}"/>
        <j2seproject3:javac classpath="${javac.test.classpath}" debug="true" destdir="${build.test.classes.dir}" excludes="" includes="${javac.includes}" sourcepath="${test.src.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single" name="compile-test-single"/>
    <!--
                =======================
                JUNIT EXECUTION SECTION
                =======================
            -->
    <target depends="init" if="have.tests" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <j2seproject3:junit testincludes="**/*Test.java"/>
    </target>
    <target depends="init,compile-test,-pre-test-run,-do-test-run" if="have.tests" name="-post-test-run">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target depends="init" if="have.tests" name="test-report"/>
    <target depends="init" if="netbeans.home+have.tests" name="-test-browse"/>
    <target depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests." name="test"/>
    <target depends="init" if="have.tests" name="-pre-test-run-single">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <j2seproject3:junit excludes="" includes="${test.includes}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single" if="have.tests" name="-post-test-run-single">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,-do-not-recompile,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test." name="test-single"/>
    <!--
                =======================
                JUNIT DEBUGGING SECTION
                =======================
            -->
    <target depends="init,compile-test" if="have.tests" name="-debug-start-debuggee-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <property location="${build.test.results.dir}/TEST-${test.class}.xml" name="test.report.file"/>
        <delete file="${test.report.file}"/>
        <mkdir dir="${build.test.results.dir}"/>
        <j2seproject3:debug classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner" classpath="${ant.home}/lib/ant.jar:${ant.home}/lib/ant-junit.jar:${debug.test.classpath}">
            <customize>
                <syspropertyset>
                    <propertyref prefix="test-sys-prop."/>
                    <mapper from="test-sys-prop.*" to="*" type="glob"/>
                </syspropertyset>
                <arg value="${test.class}"/>
                <arg value="showoutput=true"/>
                <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter"/>
                <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,${test.report.file}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target depends="init,compile-test" if="netbeans.home+have.tests" name="-debug-start-debugger-test">
        <j2seproject1:nbjpdastart classpath="${debug.test.classpath}" name="${test.class}"/>
    </target>
    <target depends="init,-do-not-recompile,compile-test-single,-debug-start-debugger-test,-debug-start-debuggee-test" name="debug-test"/>
    <target depends="init,-pre-debug-fix,compile-test-single" if="netbeans.home" name="-do-debug-fix-test">
        <j2seproject1:nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix-test" if="netbeans.home" name="debug-fix-test"/>
    <!--
                =========================
                APPLET EXECUTION SECTION
                =========================
            -->
    <target depends="init,compile-single" name="run-applet">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <j2seproject1:java classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </j2seproject1:java>
    </target>
    <!--
                =========================
                APPLET DEBUGGING  SECTION
                =========================
            -->
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-applet">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <j2seproject3:debug classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-applet" if="netbeans.home" name="debug-applet"/>
    <!--
                ===============
                CLEANUP SECTION
                ===============
            -->
    <target depends="init" name="deps-clean" unless="no.deps"/>
    <target depends="init" name="-do-clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>

    	<!--<delete includeemptydirs="true">  
            <fileset dir="${dist.dir}">                    
                <exclude name="bin/*"/>
                <exclude name="mappings/*"/>
                <exclude name="presets/*"/>
            </fileset>
        </delete>
        -->
    </target>
	
    <target name="-post-clean">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-clean,-do-clean,-post-clean" description="Clean build products." name="clean"/>
    
    <!-- 
    	 ================================================================
    	 	CUSTOM INSTALLERS TARGET: builds all and then creates the IzPack 
         	packages. Finally wraps the windows package in a native windows
         	launcher.
         ================================================================
      -->
    <target depends="default" description="build everything and then package it" name="installers">    	
    	
        <echo>STARTING BUILD: ${build.number}</echo>

    	<echo>Copy layout presets into distribution</echo>
        <property name="presets-source" value="presets"/> 
        <property name="presets-target" value="dist/lib/presets/"/>
    	
        <copy todir="${presets-target}"> 
        	<fileset dir="${presets-source}"/>
        </copy>

       	<mkdir dir="dist/installers"/>
    	
    	<copy todir="dist/installers/images"><fileset dir="installers/images"/></copy>
    	<copy todir="dist/installers/launchers"><fileset dir="installers/launchers"/></copy>
       	<copy todir="dist/installers/packs"><fileset dir="installers/packs"/></copy>      	
    	<copy todir="dist/installers/text"><fileset dir="installers/text"/></copy>
    	
    	<!-- update the src/lib/presets/mappings packs -->
    	<echo>updating installer packs...</echo>
    	
    	<zip destfile="dist/installers/packs/src.zip" basedir="src/" excludes="**/.svn"/>
    	<zip destfile="dist/installers/packs/lib.zip" basedir="dist/lib/" excludes="**/.svn"/>

        <!-- pack up the presets and copy them to the packs directory -->
        <zip destfile="dist/installers/packs/presets.zip" basedir="presets/"/>

        <!-- pack up the mappings and copy them to the packs directory -->
        <zip destfile="dist/installers/packs/mappings.zip" basedir="mappings/"/>

        <mkdir dir="dist/installers/packages/light"/>
        <mkdir dir="dist/installers/packages/macosx"/>       		
        <mkdir dir="dist/installers/packages/win"/>
                
        
    	<!-- copy contigs and update buildnumber where needed -->
        <mkdir dir="dist/installers/conf"/>

    	<copy file="installers/conf/shortcutSpec.xml" todir="dist/installers/conf/"/>
    	<copy file="installers/conf/Unix_shortcutSpec.xml" todir="dist/installers/conf/"/>
    	
    	<copy file="installers/conf/robin_launch4j.template.xml" tofile="dist/installers/conf/robin_launch4j.xml" overwrite="true"/>
    	<replaceregexp file="dist/installers/conf/robin_launch4j.xml" match="__BUILDNUM__" replace="${build.number}" flags="g" />   
    	
    	<copy file="installers/conf/robin_launch4j.template_x64.xml" tofile="dist/installers/conf/robin_launch4j_x64.xml" overwrite="true"/>    	
    	<replaceregexp file="dist/installers/conf/robin_launch4j_x64.xml" match="__BUILDNUM__" replace="${build.number}" flags="g" />

    	<copy file="installers/conf/robin_izpack_install_template.xml" tofile="dist/installers/conf/robin_izpack_install.xml" overwrite="true" />
        <replace file="dist/installers/conf/robin_izpack_install.xml" token="#VERSION#" value="${version.number}_build${build.number}"/>
        
        <copy file="installers/conf/robin_izpack_install_light_template.xml" tofile="dist/installers/conf/robin_izpack_install_light.xml" overwrite="true" />
        <replace file="dist/installers/conf/robin_izpack_install_light.xml" token="#VERSION#" value="${version.number}_build${build.number}"/>
        
        <copy file="installers/conf/robin_izpack_install_x64_template.xml" tofile="dist/installers/conf/robin_izpack_install_x64.xml" overwrite="true" />
        <replace file="dist/installers/conf/robin_izpack_install_x64.xml" token="#VERSION#" value="${version.number}_build${build.number}"/>
 
        <echo>BUILDING INSTALLERS...</echo>
    	
        <property name="launch4j.dir" location="/home/marie/staging/launch4j" />
        <taskdef name="launch4j"
            classname="net.sf.launch4j.ant.Launch4jTask"
            classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />

        <property name="IzPack.dir" location="/home/marie/IzPack" />
    	<taskdef name="IzPack" 
    	         classname="com.izforge.izpack.ant.IzPackTask"
    		     classpath="${IzPack.dir}/lib/standalone-compiler.jar"/>
    	
    	<!-- create exe wrapper of robin main jar for windows -->
    	
    	<echo>Wrapping Robin main jar into native windows launcher</echo>
    	<copy file="installers/conf/robin_jar_wrapper_launch4j.xml" tofile="dist/installers/conf/robin_jar_wrapper_launch4j.xml"/>
    	<launch4j configFile="dist/installers/conf/robin_jar_wrapper_launch4j.xml"/>
    	<echo>... done</echo>
    	        	
    	<!-- create windows 2000/XP/Vista 32 bit installer package -->
    	
    	<IzPack input="dist/installers/conf/robin_izpack_install.xml"
    	        output="dist/installers/packages/win/RobinInstaller_win32_build${build.number}.jar"
    	        installerType="standard"
    	        basedir="dist/installers"
    	        IzPackDir="dist/installers/"/>
    	
    	<!-- create windows 7 64 bit installer package -->
    	
    	<IzPack input="dist/installers/conf/robin_izpack_install_x64.xml"
    	    	output="dist/installers/packages/win/RobinInstaller_win7_x64_build${build.number}.jar"
    	    	installerType="standard"
    	    	basedir="dist/installers"
    	    	IzPackDir="dist/installers/"/>

    	<!-- Wrap windows installer packages -->

    	<echo>Wrapping installer for win32 in a native launcher</echo>
    	<launch4j configFile="dist/installers/conf/robin_launch4j.xml"/>
    	<echo>... done</echo>
    	
    	<echo>Wrapping installer for windows7_x64 in a native launcher</echo>
    	<launch4j configFile="dist/installers/conf/robin_launch4j_x64.xml"/>
    	<echo>... done</echo>
    	
    	<!-- Pure-java installer packages -->
    	
       	<IzPack input="dist/installers/conf/robin_izpack_install_light.xml"
 	    	    output="dist/installers/packages/light/RobinInstaller_java_build${build.number}.jar"
       	    	installerType="standard"
       	    	basedir="dist/installers"
        	    IzPackDir="dist/installers/"/>

    	
    	<!-- Mac Witchcraft -->
        <mkdir dir="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java"/>

        <copy file="installers/packs/src.zip"
    		  tofile="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java/src.zip"
    		  overwrite="true"/>
    	
    	<copy file="dist/Robin2.jar"
    	    tofile="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java/Robin2.jar"
    	 	overwrite="true"/>
		
		<!-- copy the current dist/lib to the mac bundles... new libs still have to be added to the Info.plist manually! -->        
        
    	<copy todir="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java/lib" overwrite="true">
            <fileset dir="dist/lib"/>
        </copy>
        
        <copy todir="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java/lib/presets">
    		<fileset dir="${presets-source}"/>
    	</copy>

        <!-- remove testing configuration files and R start scripts from the mac app bundles -->

    	<delete file="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java/robin.conf" verbose="true"/>
        <delete file="dist/installers/packages/macosx/app_universal/RobiNA.app/Contents/Resources/Java/R/bin/R" verbose="true"/>
       	
    	<echo>MacOSX 10.6 universal (skipped)</echo>
   <!-- 	
		<echo>running hdiutil...</echo>
    	<exec executable="hdiutil">
    		<arg value="create"/>
    		<arg value="dist/installers/packages/macosx/dmg/RobiNA_mac_10.6_universal_build${build.number}.dmg"/>
                <arg value="-volname"/>
    		<arg value="RobiNA_leopard_universal"/>
    		<arg value="-srcfolder"/>
    		<arg value="dist/installers/installer-packages/macosx/app_universal/"/>
    	</exec>
    	<echo>... done</echo>
-->
    </target>

    <!--
    	 ================================================================
    	 	CUSTOM INSTALLERS EXPORT TARGET: builds all and then creates the IzPack
         	packages. Finally wraps the windows package in a native windows
         	launcher and exports all the generated installer packages into
                the installers-export folder
         ================================================================
      -->
    <target depends="installers" description="build everything and then package it" name="installers-export">
        <!-- create a new directory taking up the files for the current build -->
        <echo>exporting the installer packages to installers/export/build_${build.number}</echo>
        <mkdir dir="dist/installers/export/build_${build.number}"/>

        <!-- copy the installer packages -->

        <copy file="dist/installers/packages/light/RobinInstaller_java_build${build.number}.jar"
            tofile="dist/installers/export/build_${build.number}/RobinInstaller_java_build${build.number}.jar"
            overwrite="false"/>

        <copy file="dist/installers/packages/win/RobinInstaller_win7_x64_build${build.number}.exe"
            tofile="dist/installers/export/build_${build.number}/RobinInstaller_win7_x64_build${build.number}.exe"
            overwrite="false"/>

        <copy file="dist/installers/packages/win/RobinInstaller_win32_build${build.number}.exe"
            tofile="dist/installers/export/build_${build.number}/RobinInstaller_win32_build${build.number}.exe"
            overwrite="false"/>

    	<!--
    	<copy file="dist/installers/installer/macosx/dmg/RobiNA_mac_10.6_universal_build${build.number}.dmg"
            tofile="dist/installers/export/build_${build.number}/RobiNA_mac_10.6_universal_build${build.number}.dmg"
            overwrite="false"/>
		-->
    	
        <echo>done exporting build_${build.number}</echo>
    </target>

    <!--
    	 ================================================================
    	 	CUSTOM INSTALLERS TARGET: builds installer packages for
                windows activating the console launcher configuration
                that will run the app from a console preserving the
                console output for debugging
         ================================================================
      -->
	
	<!-- Removed since it is currently identical to the standard build  
	
    <target depends="default" description="build windows installers for debugging only" name="installers-windebug">
    	
    </target>
	-->
	
</project>
