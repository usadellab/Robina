/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RNASeqReferenceGenomePanel.java
 *
 * Created on 28.09.2011, 19:55:16
 */
package de.mpimp.golm.robin.GUI.RNASeq.mapping;

import de.mpimp.golm.common.gui.CollapsibleInfoDialog;
import de.mpimp.golm.common.logger.SimpleLogger;
import de.mpimp.golm.common.utilities.Utilities;
import de.mpimp.golm.robin.GUI.RNASeq.RNASeqWorkflowPanel;
import de.mpimp.golm.robin.RobinConstants;
import de.mpimp.golm.robin.data.RNASeqDataModel;
import de.mpimp.golm.common.gui.MessageWindow;
import de.mpimp.golm.common.gui.SimpleErrorMessage;
import de.mpimp.golm.robin.GUI.ProgressDialog;
import de.mpimp.golm.robin.rnaseq.mapping.RNASeqBowtieBuildProcess;
import de.mpimp.golm.robin.rnaseq.parser.RNASeqReferenceParser;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import matrix.GeneGC;
import org.gabipd.parser.ParserException;
import org.openide.util.Exceptions;

/**
 *
 * @author marc
 */
public class RNASeqReferenceGenomePanel extends RNASeqAbstractRefPanel {

    private File indexDir;
    private Timer tim;

    /**
     * Creates new form RNASeqReferenceGenomePanel
     */
    public RNASeqReferenceGenomePanel(RNASeqDataModel model, RNASeqWorkflowPanel main) {
        super();
        initComponents();
        this.dataModel = model;
        this.mainPanel = main;
        indexDir = new File(mainPanel.getMainGUI().getResourcePath(), "index");
        populateReferenceBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        refGFFField = new javax.swing.JTextField();
        chooseGFF3FileButton = new javax.swing.JButton();
        refSeqFileField = new javax.swing.JTextField();
        chooseReferenceFileButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        refSeqAvgLenLabel = new javax.swing.JLabel();
        refSeqNumberLabel = new javax.swing.JLabel();
        refNcontentLabel = new javax.swing.JLabel();
        refN50Label = new javax.swing.JLabel();
        referenceIndexBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 11), new java.awt.Color(0, 51, 102))); // NOI18N
        setMaximumSize(new java.awt.Dimension(195, 2147483647));
        setMinimumSize(new java.awt.Dimension(185, 225));
        setPreferredSize(new java.awt.Dimension(185, 225));
        setLayout(new java.awt.GridBagLayout());

        refGFFField.setEditable(false);
        refGFFField.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.refGFFField.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), refGFFField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 213;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 0, 0);
        add(refGFFField, gridBagConstraints);

        chooseGFF3FileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/openFile.png"))); // NOI18N
        chooseGFF3FileButton.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.chooseGFF3FileButton.text")); // NOI18N
        chooseGFF3FileButton.setToolTipText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.chooseGFF3FileButton.toolTipText")); // NOI18N
        chooseGFF3FileButton.setActionCommand(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.chooseGFF3FileButton.actionCommand")); // NOI18N
        chooseGFF3FileButton.setBorderPainted(false);
        chooseGFF3FileButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), chooseGFF3FileButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        chooseGFF3FileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseGFF3FileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        add(chooseGFF3FileButton, gridBagConstraints);

        refSeqFileField.setEditable(false);
        refSeqFileField.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.refSeqFileField.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), refSeqFileField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        refSeqFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refSeqFileFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 213;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(refSeqFileField, gridBagConstraints);

        chooseReferenceFileButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/openFile.png"))); // NOI18N
        chooseReferenceFileButton1.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.chooseReferenceFileButton1.text")); // NOI18N
        chooseReferenceFileButton1.setToolTipText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.chooseReferenceFileButton1.toolTipText")); // NOI18N
        chooseReferenceFileButton1.setBorderPainted(false);
        chooseReferenceFileButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), chooseReferenceFileButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        chooseReferenceFileButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseReferenceFileButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(chooseReferenceFileButton1, gridBagConstraints);

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()-2f));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.jLabel1.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getSize()-2f));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.jLabel2.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jLabel2, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 25, 0, 25);
        add(jSeparator1, gridBagConstraints);

        refSeqAvgLenLabel.setFont(refSeqAvgLenLabel.getFont().deriveFont(refSeqAvgLenLabel.getFont().getSize()-2f));
        refSeqAvgLenLabel.setForeground(new java.awt.Color(102, 102, 102));
        refSeqAvgLenLabel.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.refSeqAvgLenLabel.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), refSeqAvgLenLabel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 2, 0);
        add(refSeqAvgLenLabel, gridBagConstraints);

        refSeqNumberLabel.setFont(refSeqNumberLabel.getFont().deriveFont(refSeqNumberLabel.getFont().getSize()-2f));
        refSeqNumberLabel.setForeground(new java.awt.Color(102, 102, 102));
        refSeqNumberLabel.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.refSeqNumberLabel.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), refSeqNumberLabel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 0);
        add(refSeqNumberLabel, gridBagConstraints);

        refNcontentLabel.setFont(refNcontentLabel.getFont().deriveFont(refNcontentLabel.getFont().getSize()-2f));
        refNcontentLabel.setForeground(new java.awt.Color(102, 102, 102));
        refNcontentLabel.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.refNcontentLabel.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), refNcontentLabel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(refNcontentLabel, gridBagConstraints);

        refN50Label.setFont(refN50Label.getFont().deriveFont(refN50Label.getFont().getSize()-2f));
        refN50Label.setForeground(new java.awt.Color(102, 102, 102));
        refN50Label.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.refN50Label.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), refN50Label, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 2, 0);
        add(refN50Label, gridBagConstraints);

        referenceIndexBox.setFont(referenceIndexBox.getFont().deriveFont(referenceIndexBox.getFont().getSize()-1f));
        referenceIndexBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceIndexBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(referenceIndexBox, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/QuestionMark.png"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.jButton1.text")); // NOI18N
        jButton1.setActionCommand(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.jButton1.actionCommand")); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleHelpButtonClick(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        add(jButton1, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/QuestionMark.png"))); // NOI18N
        jButton2.setText(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.jButton2.text")); // NOI18N
        jButton2.setActionCommand(org.openide.util.NbBundle.getMessage(RNASeqReferenceGenomePanel.class, "RNASeqReferenceGenomePanel.jButton2.actionCommand")); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleHelpButtonClick(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        add(jButton2, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

private void chooseGFF3FileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseGFF3FileButtonActionPerformed
    java.awt.FileDialog pdChooser = new java.awt.FileDialog(new Frame(), "Please choose reference genome annotation GFF3 file", FileDialog.LOAD);
    pdChooser.setDirectory(System.getProperty("user.home"));
    // this might fix it on a mac
    System.setProperty("apple.awt.fileDialogForDirectories", "false");
    pdChooser.setVisible(true);
    if (pdChooser.getFile() == null) {
        return;
    }
    File gff3annoFile = new File(pdChooser.getDirectory(), pdChooser.getFile());
    dataModel.setGFF3annotationFile(gff3annoFile);
    dataModel.setReferenceType(RNASeqDataModel.REFERENCE_TYPE.GENOME);
    refGFFField.setText(gff3annoFile.getName());

    if ((dataModel.getGFF3annotationFile() != null) && (dataModel.getReferenceFile() != null)) {
        if (!this.checkReferenceData()) return; 
    } else {
        // input not yet complete
        return;
    }

}//GEN-LAST:event_chooseGFF3FileButtonActionPerformed

private void chooseReferenceFileButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseReferenceFileButton1ActionPerformed
    java.awt.FileDialog pdChooser = new java.awt.FileDialog(new Frame(), "Please choose reference genome sequence", FileDialog.LOAD);
    pdChooser.setDirectory(System.getProperty("user.home"));

    // this might fix it on a mac
    System.setProperty("apple.awt.fileDialogForDirectories", "false");
    pdChooser.setVisible(true);
    if (pdChooser.getFile() == null) {
        return;
    }
    File referenceFile = new File(pdChooser.getDirectory(), pdChooser.getFile());
    dataModel.setReferenceFile(referenceFile);
    dataModel.setReferenceType(RNASeqDataModel.REFERENCE_TYPE.GENOME);
    refSeqFileField.setText(referenceFile.getName());

    if ((dataModel.getGFF3annotationFile() != null) && (dataModel.getReferenceFile() != null)) {
        this.checkReferenceData();
    } else {
        // input not yet complete
        return;
    }
}//GEN-LAST:event_chooseReferenceFileButton1ActionPerformed

    private void populateReferenceBox() {
        File[] files = indexDir.listFiles(new FileFilter() {
            public boolean accept(File pathname) {
                if (pathname.getName().contains("GENOME")) {
                    return true;
                } else {
                    return false;
                }
            }
        });

        HashMap<String, Integer> uniqNames = new HashMap<String, Integer>();
        for (File file : files) {
            String[] elems = file.getName().split("_GENOME");
            uniqNames.put(elems[0], 1);
        }
        
        referenceIndexBox.removeAllItems();
        for (String refindex : uniqNames.keySet()) {
            referenceIndexBox.addItem(refindex);
        }
        referenceIndexBoxActionPerformed(null);
    }

    @Override
    protected void referenceCheckedReadyToGo() {
        mainPanel.readyToStartMapping();
    }

    private boolean checkReferenceData() {
        
        // read in the reference file and check it on the way    
        final ProgressDialog dial = new ProgressDialog(mainPanel.getMainGUI(), true, true);
        dial.setText("Reading reference file ...");
        dial.setIndeterminate(true);

        dataModel.setReferenceindexName((String) referenceIndexBox.getSelectedItem());
        if (dataModel.getReferenceindexName() == null) {
            dataModel.setReferenceindexName(dataModel.getReferenceFile().getName() + "_" + dataModel.getReferenceType());
        }

        SwingWorker<RNASeqReferenceParser, Integer> refChecker = new SwingWorker<RNASeqReferenceParser, Integer>() {
           
            protected RNASeqReferenceParser doInBackground() {
                RNASeqReferenceParser fastaParser = null;
                try {
                    fastaParser = new RNASeqReferenceParser(new FileInputStream(dataModel.getReferenceFile()), 0);
                    fastaParser.parseNow();
                    
                    if (fastaParser == null) {
                        SimpleLogger.getLogger(true).logMessage("FASTA reference parser failed. Import reference cancelled");
                        mainPanel.getMainGUI().stopBusyAnimation();
                        return null;
                    }


                    refSeqAvgLenLabel.setText("Avg. length: " + fastaParser.getNumberSymbolsRead() / fastaParser.getNumberEntriesRead());
                    refSeqNumberLabel.setText("Sequences: " + fastaParser.getNumberEntriesRead());
                    refNcontentLabel.setText("N content: " + fastaParser.getNcontent());
                    refN50Label.setText("N50: " + fastaParser.getN50());

                    // compute the GC content & lengths table and write it to the index folder
                    GeneGC geneGC = new GeneGC();
                    Map<String, GeneGC.Gene> geneMap = geneGC.calc(dataModel.getGFF3annotationFile(), dataModel.getReferenceFile());
                    
                    //DEBUG
                    System.out.println("back in check reference worker");
                    if (geneMap != null) {
                        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(indexDir, dataModel.getReferenceindexName() + ".lengths")));

                        for (Map.Entry<String, GeneGC.Gene> entry : geneMap.entrySet()) {
                            GeneGC.Gene gene = entry.getValue();
                            bw.write(entry.getKey() + "\t" + gene.getTotalLength() + "\t" + gene.getGcRatio() + "\n");
                        }
                        bw.close();
                        //DEBUG
                        System.out.println("lenghts file written");

                    } else {
                        SimpleLogger.getLogger(true).logException(new Exception("gene lengths and GC contents could not be computed."));                        
                        dial.dispose();
                        return null;
                    }
                } catch (Exception e) {
                    SimpleLogger.getLogger(true).logException(e);                    
                }
                return fastaParser;
            }

            @Override
            protected void done() {  
                //DEBUG
                System.out.println("check ref worker done");
                try {
                    if (get() == null) return;
                    dial.dispose();

                    JOptionPane.showMessageDialog(RNASeqReferenceGenomePanel.this, "Robin will now prepare the reference sequences for\n"
                            + "bowtie - this may take a while depending on the size\n"
                            + "of the file you supplied.", "Bulding reference index", JOptionPane.WARNING_MESSAGE);

                    buildNewReferenceIndex();

                } catch (IOException ex) {                    
                    SimpleLogger.getLogger(true).logException(ex);
                } catch (Exception e) {                    
                    SimpleLogger.getLogger(true).logException(e);
                }
            }

           
        };
        mainPanel.getMainGUI().startBusyAnimation("building index...");
        refChecker.execute();
        dial.setVisible(true);
        try {
            if (refChecker.get() == null) {
                return false;
            } else {
                return true;
            }
        } catch (Exception e) {
            // ignore
        } finally {
            return false;
        }
    }

    private void buildNewReferenceIndex() throws IOException {

        mainPanel.appendToMappingProgressPane("Building Bowtie index", RobinConstants.attrBoldBlack);
        final ProgressDialog win = new ProgressDialog(mainPanel.getMainGUI(), true, true);
        win.setText("Building bowtie index...");
        win.setIndeterminate(true);

        File indexPath = new File(indexDir, dataModel.getReferenceFile().getName() + "_" + dataModel.getReferenceType() + "_bwtindex");

        //copy the GFF3 annotation
        SimpleLogger.getLogger(true).logMessage("copying annotation");

        Utilities.copyFile(dataModel.getGFF3annotationFile(),
                new File(indexPath.getCanonicalPath() + ".gff3"));

//        Utilities.copyFile( new File(indexDir, dataModel.getReferenceindexName() + ".lengths"), 
//                new File(dataModel.getInputDir(), "gene.lengths"));

        dataModel.setGFF3annotationFile(new File(indexPath.getCanonicalPath() + ".gff3"));

        String arch = mainPanel.getDelegate().getSysArchString();
        File instDir = new File(mainPanel.getMainGUI().getInstallPath());
        File binDir = new File(instDir, "bin");
        File bt_build = new File(binDir, "bowtie-build_" + arch);
        final RNASeqBowtieBuildProcess p = new RNASeqBowtieBuildProcess(
                dataModel,
                bt_build.getCanonicalPath(),
                new ArrayList<String>(), // no args
                indexPath);

        ExecutorService exe = mainPanel.getExecutor();

        final Future fut = exe.submit(p);

        tim = new Timer(500, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (fut.isDone()) {
                    if (p.getExitValue() != 0) {
                        new SimpleErrorMessage(mainPanel, "Bowtie-build process failed. Exit value:" + p.getExitValue());
                        win.dispose();
                        badBuild();
                        return;
                    } else {
                        win.dispose();
                        mainPanel.getMainGUI().stopBusyAnimation();
                        // when all is done and OK
                        referenceIndexBox.addItem(dataModel.getReferenceFile().getName());
                        referenceIndexBox.setSelectedItem(dataModel.getReferenceFile().getName());
                        referenceCheckedReadyToGo();
                    }
                }
            }
        });
        tim.start();
        win.setVisible(true);
    }

    private void badBuild() {
        tim.stop();
    }

private void refSeqFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refSeqFileFieldActionPerformed
}//GEN-LAST:event_refSeqFileFieldActionPerformed

private void referenceIndexBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenceIndexBoxActionPerformed
    dataModel.setReferenceindexName((String) referenceIndexBox.getSelectedItem());
    if (dataModel.getReferenceindexName() == null) {
        return;
    }

    if (dataModel.getGFF3annotationFile() == null) {
        File indexPath = new File(indexDir, dataModel.getReferenceindexName() + "_" + dataModel.getReferenceType() + "_bwtindex");
        try {
            dataModel.setGFF3annotationFile(new File(indexPath.getCanonicalPath() + ".gff3"));
        } catch (IOException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        }
    }
    mainPanel.readyToStartMapping();
}//GEN-LAST:event_referenceIndexBoxActionPerformed

private void handleHelpButtonClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleHelpButtonClick
    helpHandler.showHelpDialogForKey("rnaseqhelp." + evt.getActionCommand(), this.mainPanel.getMainGUI());
}//GEN-LAST:event_handleHelpButtonClick
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseGFF3FileButton;
    private javax.swing.JButton chooseReferenceFileButton1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField refGFFField;
    private javax.swing.JLabel refN50Label;
    private javax.swing.JLabel refNcontentLabel;
    private javax.swing.JLabel refSeqAvgLenLabel;
    private javax.swing.JTextField refSeqFileField;
    private javax.swing.JLabel refSeqNumberLabel;
    private javax.swing.JComboBox referenceIndexBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                RNASeqReferenceGenomePanel refpanel = new RNASeqReferenceGenomePanel(new RNASeqDataModel(), null);

                JFrame frame = new JFrame();
                frame.add(refpanel);
                frame.pack();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setLocation(500, 500);
                frame.setVisible(true);
            }
        });
    }

    @Override
    public void setReferenceIndex(String referenceindexName) {
        referenceIndexBox.setSelectedItem(referenceindexName);
    }

    @Override
    public void resetPanel() {
        dataModel.setReferenceFile(null);
        dataModel.setGFF3annotationFile(null);
        populateReferenceBox();
    }
}
