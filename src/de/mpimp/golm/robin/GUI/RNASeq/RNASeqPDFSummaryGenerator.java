/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.mpimp.golm.robin.GUI.RNASeq;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import de.mpimp.golm.common.logger.SimpleLogger;
import de.mpimp.golm.common.utilities.Utilities;
import de.mpimp.golm.robin.GUI.RobinMainGUI;
import de.mpimp.golm.robin.data.RNASeqDataModel;
import de.mpimp.golm.robin.rnaseq.parser.FastQFile;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Date;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author marc
 */
public class RNASeqPDFSummaryGenerator {

    private RNASeqDataModel dataModel;
    private RobinMainGUI mainGUI;
    private File outFile;
    private Document document;
    private PdfWriter writer;
    private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.HELVETICA, 16,
            Font.BOLD, BaseColor.GRAY);
    private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12,
            Font.BOLD, BaseColor.GRAY);
    private static Font smallRegular = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL, BaseColor.BLACK);
    private static Font tableFont = new Font(Font.FontFamily.HELVETICA, 10,
            Font.NORMAL, BaseColor.BLACK);
    private static Font boldItalic = new Font(Font.FontFamily.HELVETICA, 12,
            Font.BOLDITALIC, BaseColor.DARK_GRAY);
    private static Font console = new Font(Font.FontFamily.COURIER, 12,
            Font.NORMAL, BaseColor.BLACK);

    public RNASeqPDFSummaryGenerator(RNASeqDataModel dataModel, RobinMainGUI main) {
        this.dataModel = dataModel;
        this.mainGUI = main;

        document = new Document(PageSize.A4);
        outFile = new File(dataModel.getLogDir().getParentFile(), dataModel.getExperimentName() + "_summary.pdf");

        try {
            writer = PdfWriter.getInstance(document, new FileOutputStream(outFile));
            document.open();

            //build the content
            addMetaData();
            addTitlePage();
            addGeneralSummary();
            addMAPlots();
            addVennDiagrams();

            // add specific plots and data
            switch (dataModel.getAnalysisType()) {
                case EDGER:
                    addMDSPlot();
                    break;
                case DESEQ:
                    break;
                case LIMMA:
                    break;
            }

            addTopTables();
            addReferences();
            addSessionInfo();
            document.close();

        } catch (FileNotFoundException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        } catch (DocumentException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        } catch (MalformedURLException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        } catch (IOException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        }
    }

    private void addMetaData() {
        document.addTitle("RobiNA analysis summary project " + dataModel.getExperimentName());
        document.addSubject("report created using iText");
        //document.addKeywords("");
        //document.addAuthor("");
    }

    private void addTitlePage() throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Analysis summary of project " + dataModel.getExperimentName(), catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        String version = mainGUI == null ? "1.2.3" : mainGUI.getVersionString();
        preface.add(new Paragraph(
                "using RobiNA version " + version,
                smallBold));


        addEmptyLine(preface, 1);

        document.add(preface);
        // Start a new page
        //document.newPage();
    }

    private void addGeneralSummary() throws DocumentException {

        Paragraph general = new Paragraph();
        Paragraph g1 = new Paragraph();
        g1.setAlignment(Element.ALIGN_JUSTIFIED);
        if (dataModel.isImportCountsTable()) {



            g1.add(new Paragraph("The analysis was run using count data imported from a precomputed"
                    + "counts table file: " + dataModel.getImportCountsTableFile().getName(), smallRegular));


            g1.add(new Paragraph("Between the samples defined in the imported counts table, the following contrasts"
                    + "have been computed:", smallRegular));
        } else {
            g1.add(new Paragraph("\tThe analysis was run with a total of " + dataModel.getInputFiles().size()
                    + " input files that were organized in " + dataModel.getSamples().keySet().size() + " samples."
                    + "\n", smallRegular));

            // insert a table giving raw file name, sample name, raw reads and reads that passed the QC/Trimmomatic
            addSampleTable(g1);

            g1.add(new Paragraph("\nBetween the samples defined in the table given above, the following contrasts "
                    + "have been computed:\n", smallRegular));
        }

        general.add(g1);

        Paragraph contrasts = new Paragraph(StringUtils.join(dataModel.getContrastTerms().replaceAll("\\s+", "").split(",\\n?"), "\n\t\t") + "\n\n", boldItalic);
        contrasts.setAlignment(Element.ALIGN_CENTER);

        general.add(contrasts);

        Paragraph method = new Paragraph("The normalization and statistical evaluation of differential gene expression has been\n"
                + "performed using ", smallRegular);
        method.setAlignment(Element.ALIGN_JUSTIFIED);



        switch (dataModel.getAnalysisType()) {
            case EDGER:
                method.add("edgeR (Robinson et al., 2010)");
                break;
            case LIMMA:
                method.add("limma (Smyth et al., 2004 and Robinson et al., 2010)");
                break;
            case DESEQ:
                method.add("DESeq (Anders and Huber, 2010)");
                break;
        }

        String gcNorm;
        if (dataModel.getNormGCMethod().equals("none")) {
            gcNorm = "The raw data was normalized according to the default procedure of the "
                    + "differential expression analysis package used.";
        } else {
            gcNorm = "The raw data was subjected to GC content bias normalization prior to "
                    + "analysis of differential gene expression according to the methods "
                    + "discussed in Risso et a.,2011 (package EDASeq). Specifically, the methods "
                    + "chosen for within- and between lane normalization were " + dataModel.getNormGCMethod() + "\n";
        }

        method.add(
                " with a p-value cut-off of " + dataModel.getPValCutoffValue() + " and using the "
                + dataModel.getPValCorrectionMethodHuman() + " method for multiple testing correction.\n"
                + gcNorm
                + "The dispersion was estimated using the " + dataModel.getDispersion() + " setting ");

        general.add(method);
        document.add(general);
    }

    private void addSampleTable(Paragraph par) throws DocumentException {
        PdfPTable table = new PdfPTable(5);

        for (String titleCell : new String[]{"File", "raw reads", "filtered reads", "sample ID", "comments"}) {
            PdfPCell c1 = new PdfPCell(new Phrase(titleCell));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
        }
        table.setHeaderRows(1);

        for (FastQFile file : dataModel.getInputFiles()) {
            table.addCell(file.getName());
            table.addCell((dataModel.isImportBAMSAM() || dataModel.isImportCountsTable()) ? "nd" : String.valueOf(file.getReadCount()));
            table.addCell((dataModel.isImportBAMSAM() || dataModel.isImportCountsTable()) ? "nd" : String.valueOf(file.getFilteredReadCount()));
            table.addCell(dataModel.getSampleByInputfileName(file));
            table.addCell(file.getComment());
        }
        par.setFont(tableFont);
        par.add(table);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private void addReferences() throws DocumentException {
        document.newPage();
        Paragraph refsHeader = new Paragraph("Literature\n\n", subFont);
        document.add(refsHeader);

        Paragraph refs = new Paragraph();

        switch (dataModel.getAnalysisType()) {
            case EDGER:
                refs.add("Robinson MD, McCarthy DJ, Smyth GK (2010) edgeR: a Bioconductor\n"
                        + "\tpackage for differential expression analysis of digital gene\n"
                        + "\texpression data. "
                        + "Bioinformatics 26: 139-140\n\n");
                break;

            case LIMMA:
                refs.add("Smyth GK (2004) Linear models and empirical bayes methods for\n"
                        + "\tassessing differential texpression in microarray experiments.\n"
                        + "\tStatistical applications in genetics and molecular\n"
                        + "\tbiology 3: Article3\n\n");

                refs.add("\tRobinson MD, McCarthy DJ, Smyth GK (2010) edgeR: a Bioconductor\n"
                        + "\tpackage for differential expression analysis of digital gene\n"
                        + "\texpression data. "
                        + "Bioinformatics 26: 139-140\n\n");
                break;

            case DESEQ:
                refs.add("\tAnders S, Huber W (2010) Differential expression analysis for\n"
                        + "\tsequence count data. "
                        + "Genome Biol 11: R106\n\n");
                break;
        }

        if (dataModel.getPValCorrectionMethod().equals("BH") || dataModel.getPValCorrectionMethod().equals("fdr")) {
            refs.add("\tBenjamini, Y., and Hochberg, Y. (1995). Controlling the false \n"
                    + "\tdiscovery rate: a practical and powerful approach to multiple testing.\n"
                    + "\tJournal of the Royal Statistical Society Series B, 57, 289–300.\n\n");
        } else if (dataModel.getPValCorrectionMethod().equals("BY")) {
            refs.add("\tBenjamini, Y., and Yekutieli, D. (2001). The control of the false discovery\n"
                    + "\trate in multiple testing under dependency.\n"
                    + "\tAnnals of Statistics 29, 1165–1188.\n\n");
        } else if (dataModel.getPValCorrectionMethod().equals("holm")) {
            refs.add("\tHolm, S. (1979). A simple sequentially rejective multiple test procedure.\n"
                    + "\tScandinavian Journal of Statistics, 6, 65–70.\n\n");
        }

        if (!dataModel.getNormGCMethod().equals("none")) {
            refs.add("Risso D, Schwartz K, Sherlock G, Dudoit S."
                    + "GC-Content Normalization for RNA-Seq Data."
                    + "BMC Bioinformatics. 2011 Dec 17;12:480.\n\n");
        }

        document.add(refs);
    }

    private void addSessionInfo() throws DocumentException, FileNotFoundException {
        Paragraph sessionHead = new Paragraph("\n\nR session information\n", subFont);
        document.add(sessionHead);

        String info = Utilities.loadString(new FileInputStream(new File(dataModel.getSourceDir(), "R.session.info.txt")));

        Paragraph infoP = new Paragraph(info + "\n\n", console);

        document.add(infoP);
    }

    private void addMAPlots() throws DocumentException, BadElementException, MalformedURLException, IOException {
        document.newPage();
        document.add(new Paragraph("MA plots of each comparison\n", subFont));
        Paragraph maText = new Paragraph();
        maText.add("The MA plots show the log2 fold change (M; logFC) plotted versus the average\n"
                + "\texpression strength (A; LogConc) for each of the comparisons that was computed.\n"
                + "\tUsually, these scatter plots show a trumpet-like shape which is attributed\n"
                + "\tto the fact that genes with a lower expression signal strength are more\n"
                + "\tstrongly affected by noise than strongly expressed genes.\n\n"
                + "\tAccording to the assumption that under most experimental conditions the\n"
                + "\tbulk of the genes of an organism are not responding differentially, the cloud\n"
                + "\tof points should be centered around a log fold change of 0.\n"
                + "\tGenes that were called significantly differentially expressed are shown in red.\n\n");

        insertPlots("maplot", maText);
        document.add(maText);
    }

    private void addVennDiagrams() throws DocumentException, BadElementException, MalformedURLException, IOException {
        document.newPage();
        document.add(new Paragraph("Venn Diagrams\n", subFont));
        Paragraph vennText = new Paragraph();
        vennText.add("\tVenn diagrams visualize the amount of genes that were called significantly\n"
                + "\tdifferentially expressed in each comparison. The conditions are represented\n"
                + "\tby circles. Genes that show a significant reponse to more than one condition\n"
                + "\tare plotted in the overlapping areas while the amount of not significantly\n"
                + "\tchanged genes is given in the lower right corner of the plots.\n\n"
                + "\tVenn diagrams allow a simple and quick overview of the impact of the treatments\n"
                + "\ton the gene expression profile and also the specificity of the responses\n\n");

        insertPlots("venn", vennText);
        document.add(vennText);
    }

    private void addMDSPlot() throws DocumentException, BadElementException, MalformedURLException, IOException {
        if (!(new File(dataModel.getPlotsDir(), "MDSplot.png").exists())) {
            return;
        }
        document.newPage();
        document.add(new Paragraph("Multi-dimensional scaling (MDS) plot\n", subFont));
        Paragraph mdsText = new Paragraph();
        mdsText.add("\tThe MDS or principal coordinate plot visualizes the distances between the\n"
                + "\tRNA-Seq libraries in the experiment. To compute the points, a set of 500\n"
                + "\ttags(genes) that have the largest variation bewteen the libraries (i.e. the\n"
                + "\tlargest tagwise dispersion when treating all libraries as one experimental group)\n"
                + "\tis selected. The distance between each pair of libraries is equivalent to the\n"
                + "\tsquare root of the common disperion between these two libraries (using the top 500\n"
                + "\tgenes.\n"
                + "\tHence, the MDS plot gives an insight into the structure of the experiment - libraries\n"
                + "\tthat were generated on biological replicates of the same treatment should cluster\n"
                + "\ttogether"
                + "\n\n");
        insertPlots("mdsplot", mdsText);
        document.add(mdsText);

    }

    private void addTopTables() throws DocumentException {
        document.newPage();
        document.add(new Paragraph("Top 10 differentially expressed genes tables for each contrast\n", subFont));

        File[] topTables = dataModel.getDetailedResultsDir().listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                if (pathname.getName().toLowerCase().startsWith("full_table")) {
                    return true;
                }
                return false;
            }
        });

        for (File table : topTables) {
            Paragraph tp = new Paragraph("Top differentially expressed genes: " + table.getName() + "\n\n", boldItalic);
            document.add(tp);
            Paragraph tab = new Paragraph();
            tab.setFont(tableFont);
            addTable(table, 10, tab);
            addEmptyLine(tab, 2);
            document.add(tab);
        }
    }

    private void addTable(File tabFile, int depth, Paragraph para) {
        try {
            FileReader fr = new FileReader(tabFile);
            BufferedReader br = new BufferedReader(fr);
            PdfPTable table = null;

            String line = null;
            int rows = 0;
            while ((line = br.readLine()) != null) {

                String[] elems = line.split("\\t");
                for (int i = 0; i < elems.length; i++) {
                    if (rows == 0) {
                        table = new PdfPTable(elems.length);
                        for (String headerCell : elems) {
                            PdfPCell c1 = new PdfPCell(new Phrase(headerCell));
                            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.addCell(c1);
                        }
                        table.setHeaderRows(1);
                    } else {
                        for (String elem : elems) {
                            table.addCell(elem);
                        }
                    }
                }
                rows++;
                
                if (rows >= depth) {
                    br.close();
                    para.add(table);
                    return;
                }
            }

        } catch (FileNotFoundException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        } catch (IOException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        }
    }

    private void insertPlots(final String prefix, Paragraph para) throws BadElementException, MalformedURLException, IOException {
        // Insert per-comparison MA plots
        File[] plots = dataModel.getPlotsDir().listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                return pathname.getName().toLowerCase().startsWith(prefix);
            }
        });

        for (File plot : plots) {
            Image image = Image.getInstance(plot.toURI().toURL());

            if (image.getWidth() > 500) {
                float factor = (500f / image.getWidth()) * 100;
                image.scalePercent(factor);
            }
            para.add(image);
        }
    }
}
