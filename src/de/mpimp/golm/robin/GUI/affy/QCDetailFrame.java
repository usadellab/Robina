/*
 * QCDetailFrame.java
 *
 * Created on 13. Mai 2008, 16:30
 */

package de.mpimp.golm.robin.GUI.affy;

import de.mpimp.golm.common.utilities.Utilities;
import de.mpimp.golm.robin.misc.RobinUtilities;
import de.mpimp.golm.robin.R.RTask;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author  marc
 */
public class QCDetailFrame extends javax.swing.JFrame {
    
    private String imagePath = null;
    
    /** Creates new form QCDetailFrame
     * @param rcall 
     */
    public QCDetailFrame(RTask rcall) {
        initComponents();
        BufferedImage rawImage = null; 
        this.imagePath = rcall.getOutputFile() + ".jpg";
        try {
            //FIXME urgently - this does only work with rcalls that do
            // not produce a series of output images!! This has to be
            // set up for each QCresultListItem individually
            rawImage = ImageIO.read(new File(imagePath));            
        } catch (IOException ex) {
            Logger.getLogger(QCResultListItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        imageLabel.setIcon(new ImageIcon(rawImage));
        
        this.setTitle(rcall.getMethod()+" "+rcall.getOutputFile());
        this.rCall = rcall;
        this.pack();
        this.setVisible(true);
    }
    
    public QCDetailFrame(RTask rcall, String imgPath) {
        initComponents();
        this.imagePath = imgPath;
        BufferedImage rawImage = null;           
        try {
            rawImage = ImageIO.read(new File(imagePath));            
        } catch (IOException ex) {
            Logger.getLogger(QCResultListItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // resize the frame to fit the image - if too big resize to fullscreen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int imageWidth = rawImage.getWidth();
        int imageHeight = rawImage.getHeight();
        int frameWidth, frameHeight;
        
        if (imageHeight > screenSize.height) frameHeight = screenSize.height;
        else
            frameHeight = imageHeight;
        
        if (imageWidth > screenSize.width) frameWidth = screenSize.width;
        else
            frameWidth = imageWidth;        
        
        this.setSize(frameWidth+20, frameHeight+30);
        
        imageLabel.setIcon(new ImageIcon(rawImage));
        
        this.setTitle(rcall.getMethod()+" "+rcall.getOutputFile());
        this.rCall = rcall;
        this.pack();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.setFocusCycleRoot(true);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        imageLabel.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(imageLabel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(362, Short.MAX_VALUE)
                .add(saveButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(closeButton))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 390, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(closeButton)
                    .add(saveButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_closeButtonActionPerformed

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    JFileChooser filechooser = new JFileChooser();
    if (filechooser.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
        String fileName = filechooser.getSelectedFile().getAbsolutePath()+".jpg";
        //if (fileName.equals(null))   {return;}        
        try {
            // Save as PNG
            Utilities.copyFile(new File(imagePath), new File(fileName));
                       
        } catch (IOException e) {
            e.printStackTrace();
        }    
    }
}//GEN-LAST:event_saveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
    private RTask rCall = null;
}
