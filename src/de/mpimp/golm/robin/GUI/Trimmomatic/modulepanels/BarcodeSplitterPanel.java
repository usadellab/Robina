/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BarcodeSplitterPanel.java
 *
 * Created on 19.09.2011, 13:28:33
 */
package de.mpimp.golm.robin.GUI.Trimmomatic.modulepanels;

import de.mpimp.golm.robin.misc.GUI.WorkflowModuleBorder;
import de.mpimp.golm.common.gui.SimpleErrorMessage;
import de.mpimp.golm.common.help.HelpHandler;
import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Exceptions;
import de.mpimp.golm.robin.rnaseq.trimmomatic.TMTrimmerArguments;

/**
 *
 * @author marc
 */
public class BarcodeSplitterPanel extends TMModulePanel {

    /** Creates new form BarcodeSplitterPanel */
    public BarcodeSplitterPanel() {
        initComponents();
        initTable();
        this.setBorder(new WorkflowModuleBorder(WorkflowModuleBorder.BLUE_SHADOW));
    }
    
    private void initTable() {
        DefaultTableModel m = (DefaultTableModel) barcodeTable.getModel();
        m.addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {                
                if (e.getType() == TableModelEvent.DELETE)
                    return;
                
                if (e.getColumn() == 1) {
                    String val = (String) barcodeTable.getValueAt(e.getFirstRow(), 1);
                    if (val.equals("")) return;
                    if (!val.toUpperCase().matches("^[ACGT]+$")) {
                        new SimpleErrorMessage(barcodeTable, "Please do only enter valid nucleobases (A, C, G, T)");
                        barcodeTable.setValueAt("", e.getFirstRow(), 1);                        
                    } else {
                        // allet schick
                    }
                    
                }
            }
        });        
    }
    
    public HashMap<String, String> getBarcodeMap() {
        HashMap<String, String> barcodes = new HashMap<String, String>();
        for (int i = 0; i < barcodeTable.getRowCount(); i++) {            
            barcodes.put((String)barcodeTable.getValueAt(i, 0), ((String)barcodeTable.getValueAt(i, 1)).toUpperCase());
        }
        return barcodes;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addLineButton = new javax.swing.JButton();
        removeLineButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        barcodeTable = new javax.swing.JTable();
        clipBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        maxMismSpinner = new javax.swing.JSpinner();
        loadBarcodesButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(212, 232, 255));
        setMaximumSize(new java.awt.Dimension(32767, 150));
        setMinimumSize(new java.awt.Dimension(0, 100));

        jPanel1.setBackground(new java.awt.Color(212, 232, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 150));
        jPanel1.setMinimumSize(new java.awt.Dimension(0, 100));

        jLabel1.setBackground(new java.awt.Color(212, 232, 255));
        jLabel1.setFont(jLabel1.getFont().deriveFont((jLabel1.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD, jLabel1.getFont().getSize()+1));
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.jLabel1.text")); // NOI18N

        jLabel2.setBackground(new java.awt.Color(212, 232, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/QuestionMark.png"))); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.jLabel2.text")); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        addLineButton.setFont(addLineButton.getFont().deriveFont(addLineButton.getFont().getSize()-2f));
        addLineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/DoubleLeftArrowHS.png"))); // NOI18N
        addLineButton.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.addLineButton.text")); // NOI18N
        addLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLineButtonActionPerformed(evt);
            }
        });

        removeLineButton.setFont(removeLineButton.getFont().deriveFont(removeLineButton.getFont().getSize()-2f));
        removeLineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/DoubleRightArrowHS.png"))); // NOI18N
        removeLineButton.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.removeLineButton.text")); // NOI18N
        removeLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLineButtonActionPerformed(evt);
            }
        });

        barcodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", ""}
            },
            new String [] {
                "Label", "Sequence"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        barcodeTable.setGridColor(new java.awt.Color(204, 204, 204));
        barcodeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(barcodeTable);

        clipBox.setFont(clipBox.getFont().deriveFont(clipBox.getFont().getSize()-2f));
        clipBox.setSelected(true);
        clipBox.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.clipBox.text")); // NOI18N

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()-2f));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.jLabel3.text")); // NOI18N

        maxMismSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 3, 1));

        loadBarcodesButton.setFont(loadBarcodesButton.getFont().deriveFont(loadBarcodesButton.getFont().getSize()-2f));
        loadBarcodesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/openFile.png"))); // NOI18N
        loadBarcodesButton.setText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.loadBarcodesButton.text")); // NOI18N
        loadBarcodesButton.setToolTipText(org.openide.util.NbBundle.getMessage(BarcodeSplitterPanel.class, "BarcodeSplitterPanel.loadBarcodesButton.toolTipText")); // NOI18N
        loadBarcodesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBarcodesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 195, Short.MAX_VALUE)
                        .add(jLabel2))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(clipBox)
                                .add(32, 32, 32)
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(maxMismSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, removeLineButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, addLineButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, loadBarcodesButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(addLineButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(removeLineButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(loadBarcodesButton))
                    .add(jScrollPane1, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(maxMismSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(clipBox))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void addLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLineButtonActionPerformed
    DefaultTableModel model = (DefaultTableModel) barcodeTable.getModel();
    model.addRow(new String[] {"", ""});
}//GEN-LAST:event_addLineButtonActionPerformed

private void removeLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLineButtonActionPerformed
    DefaultTableModel model = (DefaultTableModel) barcodeTable.getModel();
    barcodeTable.getSelectedRow();
    model.removeRow(barcodeTable.getSelectedRow());
}//GEN-LAST:event_removeLineButtonActionPerformed

private void loadBarcodesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBarcodesButtonActionPerformed
    BufferedReader br = null;
        try {
            java.awt.FileDialog pdChooser = new java.awt.FileDialog(new Frame(), "Please choose barcode table", FileDialog.LOAD);
            pdChooser.setDirectory(System.getProperty("user.home"));
            // this might fix it on a mac
            System.setProperty("apple.awt.fileDialogForDirectories", "false");
            pdChooser.setVisible(true);
            File barcodeFile = new File(pdChooser.getDirectory(), pdChooser.getFile());
            br = new BufferedReader(new FileReader(barcodeFile));
            
            DefaultTableModel tableModel = (DefaultTableModel) barcodeTable.getModel();
            for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
                tableModel.removeRow(i);
            }           
            
            String line = null;
            while ( (line = br.readLine()) != null ) {
                String comp[] = line.split("\\s+");
                tableModel.addRow(comp);                
            }                       
            
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ioe) {
            Exceptions.printStackTrace(ioe);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
}//GEN-LAST:event_loadBarcodesButtonActionPerformed

private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
    HelpHandler.getHandler().showHelpDialogForKey("rnaseqhelp."+ID, null);
}//GEN-LAST:event_jLabel2MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLineButton;
    private javax.swing.JTable barcodeTable;
    private javax.swing.JCheckBox clipBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBarcodesButton;
    private javax.swing.JSpinner maxMismSpinner;
    private javax.swing.JButton removeLineButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public TMTrimmerArguments getArguments() throws Exception {        
        if ( (barcodeTable.getValueAt(0, 0).equals("") && barcodeTable.getValueAt(0, 1).equals("")) ) {
            throw new Exception("You have to specify at least one barcode when using the barcode splitter module"); 
        }        
        TMTrimmerArguments args = new TMTrimmerArguments("BARCODESPLITTER");        
        args.put("barcodes", getBarcodeMap());
        args.put("mism", maxMismSpinner.getValue());
        args.put("clip", clipBox.isSelected());        
        return args;
    }

    @Override
    public void setArguments(TMTrimmerArguments args) {
        this.maxMismSpinner.setValue(Integer.parseInt(args.get("mism").toString()));
        this.clipBox.setSelected( Boolean.parseBoolean( args.get("clip").toString() ));
    }
}
