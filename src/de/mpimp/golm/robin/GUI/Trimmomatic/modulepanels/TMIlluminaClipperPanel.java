/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TMIlluminaClipperPanel.java
 *
 * Created on 13.09.2011, 16:24:41
 */
package de.mpimp.golm.robin.GUI.Trimmomatic.modulepanels;

import de.mpimp.golm.common.help.HelpHandler;
import de.mpimp.golm.common.logger.SimpleLogger;
import de.mpimp.golm.robin.misc.GUI.WorkflowModuleBorder;
import java.awt.FileDialog;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import org.openide.util.Exceptions;
import de.mpimp.golm.robin.rnaseq.trimmomatic.TMTrimmerArguments;

/**
 *
 * @author marc
 */
public class TMIlluminaClipperPanel extends TMModulePanel {
    
    private File adapterFile = null;

    /** Creates new form TMIlluminaClipperPanel */
    public TMIlluminaClipperPanel() {
        initComponents();
        this.setBorder(new WorkflowModuleBorder(WorkflowModuleBorder.BLUE_SHADOW));
    }
    
    public File getAdapterFile() {
        return adapterFile;
    }
     
    public int getMaxSeedMismatch() {
        return ((Integer) mismatchSpinner.getValue() ).intValue();
    }
    
    public int getMinLikelihood () {
        return ((Integer) minLikelihoodSpinner.getValue() ).intValue();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        contentPanel = new javax.swing.JPanel();
        minLikelihoodSpinner = new javax.swing.JSpinner();
        adapterPathField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        mismatchSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        loadAdapterFileButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(212, 232, 255));
        setMaximumSize(new java.awt.Dimension(2147483647, 150));
        setMinimumSize(new java.awt.Dimension(450, 145));
        setPreferredSize(new java.awt.Dimension(450, 145));

        contentPanel.setBackground(new java.awt.Color(212, 232, 255));
        contentPanel.setMaximumSize(new java.awt.Dimension(2147483647, 80));
        contentPanel.setMinimumSize(new java.awt.Dimension(415, 80));
        contentPanel.setPreferredSize(new java.awt.Dimension(415, 80));
        contentPanel.setLayout(new java.awt.GridBagLayout());

        minLikelihoodSpinner.setFont(minLikelihoodSpinner.getFont().deriveFont(minLikelihoodSpinner.getFont().getSize()-2f));
        minLikelihoodSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(12), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        contentPanel.add(minLikelihoodSpinner, gridBagConstraints);

        adapterPathField.setEditable(false);
        adapterPathField.setFont(adapterPathField.getFont().deriveFont(adapterPathField.getFont().getSize()-2f));
        adapterPathField.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.adapterPathField.text")); // NOI18N
        adapterPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adapterPathFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 96;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        contentPanel.add(adapterPathField, gridBagConstraints);

        jLabel4.setBackground(new java.awt.Color(212, 232, 255));
        jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getSize()-2f));
        jLabel4.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 4, 3);
        contentPanel.add(jLabel4, gridBagConstraints);

        mismatchSpinner.setFont(mismatchSpinner.getFont().deriveFont(mismatchSpinner.getFont().getSize()-2f));
        mismatchSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), null, Integer.valueOf(20), Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 4, 0);
        contentPanel.add(mismatchSpinner, gridBagConstraints);

        jLabel3.setBackground(new java.awt.Color(212, 232, 255));
        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()-2f));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 0, 0);
        contentPanel.add(jLabel3, gridBagConstraints);

        jLabel2.setBackground(new java.awt.Color(212, 232, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/QuestionMark.png"))); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.jLabel2.text")); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 4);
        contentPanel.add(jLabel2, gridBagConstraints);

        jLabel1.setBackground(new java.awt.Color(212, 232, 255));
        jLabel1.setFont(jLabel1.getFont().deriveFont((jLabel1.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD, jLabel1.getFont().getSize()+1));
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 0, 0);
        contentPanel.add(jLabel1, gridBagConstraints);

        jLabel5.setBackground(new java.awt.Color(212, 232, 255));
        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()-2f));
        jLabel5.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        contentPanel.add(jLabel5, gridBagConstraints);

        loadAdapterFileButton.setBackground(new java.awt.Color(212, 232, 255));
        loadAdapterFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/openFile.png"))); // NOI18N
        loadAdapterFileButton.setText(org.openide.util.NbBundle.getMessage(TMIlluminaClipperPanel.class, "TMIlluminaClipperPanel.loadAdapterFileButton.text")); // NOI18N
        loadAdapterFileButton.setBorder(null);
        loadAdapterFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAdapterFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 4);
        contentPanel.add(loadAdapterFileButton, gridBagConstraints);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(contentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(contentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void adapterPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adapterPathFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_adapterPathFieldActionPerformed

private void loadAdapterFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAdapterFileButtonActionPerformed
    java.awt.FileDialog pdChooser = new java.awt.FileDialog(new Frame(), "Please choose adapter sequence file", FileDialog.LOAD);
    pdChooser.setDirectory(System.getProperty("user.home"));

    // this might fix it on a mac
    System.setProperty("apple.awt.fileDialogForDirectories", "false");
    pdChooser.setVisible(true);    

    adapterFile = new File(pdChooser.getDirectory(), pdChooser.getFile());
    try {
        adapterPathField.setText(adapterFile.getCanonicalPath());
    } catch (IOException ex) {
        Exceptions.printStackTrace(ex);
    }
}//GEN-LAST:event_loadAdapterFileButtonActionPerformed

private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
    HelpHandler.getHandler().showHelpDialogForKey("rnaseqhelp."+ID, null);
}//GEN-LAST:event_jLabel2MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField adapterPathField;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton loadAdapterFileButton;
    private javax.swing.JSpinner minLikelihoodSpinner;
    private javax.swing.JSpinner mismatchSpinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public TMTrimmerArguments getArguments() throws Exception {
        if (adapterFile == null) {
            throw new Exception("Please provide a FASTA-formatted file containing the adapter sequences");            
        }        
        TMTrimmerArguments args = new TMTrimmerArguments("ILLUMINACLIP");        
        args.put("seqs", adapterFile);
        args.put("seedMaxMiss", mismatchSpinner.getValue());
        args.put("minPalindromeLikelihood", 0);        
        args.put("minSequenceLikelihood", minLikelihoodSpinner.getValue());        
        return args;
    }

    @Override
    public void setArguments(TMTrimmerArguments args) {
        this.adapterFile = new File(args.get("seqs").toString());
        try {
            this.adapterPathField.setText(adapterFile.getCanonicalPath());
        } catch (IOException ex) {
            SimpleLogger.getLogger(true).logException(ex);
        }
        this.mismatchSpinner.setValue(Integer.parseInt(args.get("seedMaxMiss").toString()));
        this.minLikelihoodSpinner.setValue(Integer.parseInt(args.get("minSequenceLikelihood").toString()));
    }
}
