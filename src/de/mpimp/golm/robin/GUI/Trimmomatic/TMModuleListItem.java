/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TMIlluminaTrimmer.java
 *
 * Created on 13.09.2011, 16:23:19
 */
package de.mpimp.golm.robin.GUI.Trimmomatic;

import de.mpimp.golm.common.help.HelpHandler;
import de.mpimp.golm.robin.GUI.RobinMainGUI;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import javax.swing.JFrame;
import org.openide.util.Exceptions;

/**
 *
 * @author marc
 */
public class TMModuleListItem extends javax.swing.JPanel implements Transferable {
    
    private String ID;
    private static DataFlavor TM_ITEM_FLAVOR;
    private RobinMainGUI mainGUI;
    

//    
//    public TMModuleListItem() {
//        initComponents();
//    }
    
    public TMModuleListItem(String id, String title, String desc, RobinMainGUI main) {        
        initComponents();        
        this.titleField.setText(title);
        this.setToolTipText(desc);
        this.titleField.setToolTipText(desc);
        this.moreLabel.setToolTipText(title);
        this.ID = id;
        this.mainGUI = main;
        
        //DnD
        // Add the listener which will export this panel for dragging
        this.addMouseListener(new TMDnDDraggableMouseListener());
        
        // Add the handler, which negotiates between drop target and this 
        // draggable panel
        this.setTransferHandler(new TMDnDTransferHandler());
    }

    public String getID() {
        return ID;
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        titleField = new javax.swing.JLabel();
        moreLabel = new javax.swing.JLabel();

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getSize()-2f));
        jLabel2.setForeground(new java.awt.Color(64, 64, 64));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(TMModuleListItem.class, "TMModuleListItem.jLabel2.text")); // NOI18N

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(2147483647, 140));
        setMinimumSize(new java.awt.Dimension(100, 30));
        setPreferredSize(new java.awt.Dimension(100, 50));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/gear20.png"))); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(TMModuleListItem.class, "TMModuleListItem.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(jLabel1, gridBagConstraints);

        titleField.setFont(titleField.getFont().deriveFont((titleField.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD, titleField.getFont().getSize()+1));
        titleField.setText(org.openide.util.NbBundle.getMessage(TMModuleListItem.class, "TMModuleListItem.titleField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 198;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        add(titleField, gridBagConstraints);

        moreLabel.setFont(moreLabel.getFont().deriveFont((moreLabel.getFont().getStyle() | java.awt.Font.ITALIC), moreLabel.getFont().getSize()-2));
        moreLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/QuestionMark.png"))); // NOI18N
        moreLabel.setText(org.openide.util.NbBundle.getMessage(TMModuleListItem.class, "TMModuleListItem.moreLabel.text")); // NOI18N
        moreLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moreLabelMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(moreLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void moreLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moreLabelMouseClicked
    HelpHandler.getHandler().showHelpDialogForKey("rnaseqhelp."+ID, mainGUI);
}//GEN-LAST:event_moreLabelMouseClicked


    public static void main(String [] args) {
        JFrame frame = new JFrame("Hack #59: Image Border");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        TMModuleListItem panel = new TMModuleListItem("ID", "Test item", "this is a test item with quite some text let's see how well that works.", null);       

        frame.getContentPane().add(panel);
        frame.pack();
        //frame.setSize(200,200);
        frame.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel moreLabel;
    private javax.swing.JLabel titleField;
    // End of variables declaration//GEN-END:variables
    
    
    
    // DnD stuff
    public DataFlavor[] getTransferDataFlavors() {
        DataFlavor[] flavors = {null};        
//        System.out.println("Step 4 of 7: Querying for acceptable DataFlavors to determine what is available. Our example only supports our custom RandomDragAndDropPanel DataFlavor.");
        try {
            flavors[0] = TMModuleListItem.getDataFlavor();
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
        return flavors;
    }
    
    public static DataFlavor getDataFlavor() throws ClassNotFoundException {
        if (TM_ITEM_FLAVOR == null) {
            TM_ITEM_FLAVOR = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType + ";class=de.mpimp.golm.robin.GUI.Trimmomatic.TMModuleListItem");
        }        
        return TM_ITEM_FLAVOR;   
    }

    public boolean isDataFlavorSupported(DataFlavor flavor) {
//        System.out.println("Step 6 of 7: Verifying that DataFlavor is supported.  Our example only supports our custom RandomDragAndDropPanel DataFlavor.");
        
        DataFlavor[] flavors = {null};
        try {
            flavors[0] = TMModuleListItem.getDataFlavor();
        } catch (Exception ex) {
            System.err.println("Problem lazy loading: " + ex.getMessage());
            ex.printStackTrace(System.err);
            return false;
        }

        for (DataFlavor f : flavors) {
            if (f.equals(flavor)) {
                return true;
            }
        }

        return false;
    }

    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
//        System.out.println("Step 7 of 7: Returning the data from the Transferable object. In this case, the actual panel is now transfered!");
        
        DataFlavor thisFlavor = null;

        try {
            thisFlavor = TMModuleListItem.getDataFlavor();
        } catch (Exception ex) {
            System.err.println("Problem lazy loading: " + ex.getMessage());
            ex.printStackTrace(System.err);
            return null;
        }

        // For now, assume wants this class... see loadDnD
        if (thisFlavor != null && flavor.equals(thisFlavor)) {
            return TMModuleListItem.this;
        }

        return null;
    }
}
