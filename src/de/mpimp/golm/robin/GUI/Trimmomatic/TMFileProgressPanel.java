/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TMFileProgressPanal.java
 *
 * Created on 22.09.2011, 11:32:26
 */
package de.mpimp.golm.robin.GUI.Trimmomatic;

import de.mpimp.golm.robin.rnaseq.parser.FastQFile;
import de.rzpd.data.DecimalFormat;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.Future;
import javax.swing.Timer;
import org.openide.util.Exceptions;
import de.mpimp.golm.robin.rnaseq.trimmomatic.TrimmomaticThread;

/**
 *
 * @author marc
 */
public class TMFileProgressPanel extends javax.swing.JPanel implements ActionListener {
    
    private TrimmomaticThread thread;
    private TMProgressDialog sourceDialog;
    private FastQFile inputFile;
    private Timer timer;
    private Future execStatus;    
    private boolean isReady = false;
    private boolean finishedWithErrors = false;
    private ArrayList<Exception> exceptions;
    
       
    private static final Color redInactive = new Color(255, 212, 212);
    private static final Color redActive = new Color(255, 148, 148);    
    private static final Color LIGHT_BLUE = new Color(214, 232, 255);
    private static final int POLL_INTERVAL = 100;

    /** Creates new form TMFileProgressPanal */
    public TMFileProgressPanel(TMProgressDialog source, FastQFile f, TrimmomaticThread t, Future fu) {
        initComponents();
        this.thread = t;
        this.execStatus = fu;
        this.exceptions = new ArrayList<Exception>();
        this.inputFile = f;
        this.sourceDialog = source;
        this.timer = new Timer(POLL_INTERVAL, this);
        
        fileNameLabel.setText(inputFile.getName());
        timer.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        statusTextLabel = new javax.swing.JLabel();
        fileNameLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(2147483647, 60));
        setMinimumSize(new java.awt.Dimension(191, 60));
        setPreferredSize(new java.awt.Dimension(191, 60));
        setLayout(new java.awt.GridBagLayout());

        statusTextLabel.setFont(statusTextLabel.getFont().deriveFont((statusTextLabel.getFont().getStyle() | java.awt.Font.ITALIC), statusTextLabel.getFont().getSize()-2));
        statusTextLabel.setText(org.openide.util.NbBundle.getMessage(TMFileProgressPanel.class, "TMFileProgressPanel.statusTextLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(statusTextLabel, gridBagConstraints);

        fileNameLabel.setFont(fileNameLabel.getFont().deriveFont(fileNameLabel.getFont().getSize()-2f));
        fileNameLabel.setText(org.openide.util.NbBundle.getMessage(TMFileProgressPanel.class, "TMFileProgressPanel.fileNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        add(fileNameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = -10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(progressBar, gridBagConstraints);

        statusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/alarm_clock_time_wait_icon.png"))); // NOI18N
        statusLabel.setText(org.openide.util.NbBundle.getMessage(TMFileProgressPanel.class, "TMFileProgressPanel.statusLabel.text")); // NOI18N
        statusLabel.setToolTipText(org.openide.util.NbBundle.getMessage(TMFileProgressPanel.class, "TMFileProgressPanel.statusLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        add(statusLabel, gridBagConstraints);

        progressLabel.setFont(progressLabel.getFont().deriveFont((progressLabel.getFont().getStyle() | java.awt.Font.ITALIC), progressLabel.getFont().getSize()-2));
        progressLabel.setForeground(new java.awt.Color(102, 102, 102));
        progressLabel.setText(org.openide.util.NbBundle.getMessage(TMFileProgressPanel.class, "TMFileProgressPanel.progressLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 112;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(progressLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusTextLabel;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        try {            
            if (sourceDialog.isStopRunningTasks()) {
                System.out.println("sending cancel call to "+thread.toString());
                thread.cancel();
            }
            
            if (!execStatus.isDone()) {
                progressBar.setValue(thread.getProgress());
                progressLabel.setText("reading... "+thread.getProgress()+"%");
            } else {  
                progressBar.setValue(100);
                progressLabel.setText("retained ("+thread.getNucleotidesSurvived()+
                        "/"+
                        thread.getNucleotidesProcessed()+
                        ") nucleotides ("+
                        thread.getEntriesSurvived()+"/"+
                        thread.getEntriesProcessed()+
                        " sequences)");
                this.inputFile.setReadCount(thread.getEntriesSurvived());
                
                //DEBUG
                System.out.println("inputFile readCOunt="+inputFile.getReadCount());
                
                
                trimmingFinished();
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void trimmingFinished() {
        timer.stop();
        progressBar.setValue(100);
        progressBar.setEnabled(false);
        progressBar.setIndeterminate(false);
        
        if (exceptions.size() > 0) {
            statusLabel.setIcon(
                    new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/warnings.png")));
            statusLabel.setToolTipText("Results are ready. But there were errors.");
            statusTextLabel.setText("Finished with errors");
            this.setBackground(redInactive);
            finishedWithErrors = true;
            //exceptions = thread.getExceptions();
        } else if (thread.getPercentageUnknown() > 5) {

            NumberFormat nf = new DecimalFormat("##.##", Locale.ENGLISH, DecimalFormat.FORMAT.DECIMAL_POINT);
            String perc = nf.format(thread.getPercentageUnknown());
            statusLabel.setIcon(
                    new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/warnings.png")));

            statusLabel.setToolTipText( perc + "% of the reads have an unknown barcode");
            statusTextLabel.setText("Finished with problems");
            progressLabel.setText( perc + "% of the reads have an unknown barcode!");
            progressLabel.setForeground(Color.RED);
        } else {      
            statusLabel.setIcon(
                    new javax.swing.ImageIcon(getClass().getResource("/de/mpimp/golm/robin/resources/checkmark26.png")));
            statusLabel.setToolTipText("Results are ready. Click me!");
            statusTextLabel.setText("Finished");
        }
        this.thread = null;
        this.revalidate();
    }
}
