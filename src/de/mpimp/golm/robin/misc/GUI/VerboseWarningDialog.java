/*
 * VerboseWarningDialog.java
 *
 * Created on 18. Juni 2008, 13:37
 */

package de.mpimp.golm.robin.misc.GUI;

import de.mpimp.golm.robin.data.ArrayDataModel;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicBoolean;
import org.openide.util.Exceptions;

/**
 *
 * @author  marc
 */
public class VerboseWarningDialog extends javax.swing.JDialog implements WindowListener {

    private AtomicBoolean dontExit = new AtomicBoolean(false);
    
    /** Creates new form VerboseWarningDialog */
    public VerboseWarningDialog(java.awt.Frame parent, String title, String header, String errMessage) {
        super(parent, true);
        initComponents();
        messageHeader.setText(header);
        messageArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        messageArea.setText(errMessage);
        this.setTitle(title);
        
        if (parent != null) {
            centerOnParent();
        } else {
            centerOnScreen();
        }        
        
        this.setVisible(true);
    }
    
    public VerboseWarningDialog(java.awt.Frame parent, String title, String header, String errMessage, boolean exit) {
        super(parent, true);
        initComponents();
        messageHeader.setText(header);
        messageArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        messageArea.setText(errMessage);
        this.setTitle(title);
        
        if (parent != null) {
            centerOnParent();
        } else {
            centerOnScreen();
        }        
        this.dontExit.set(exit);
        this.setVisible(true);
    }

    public VerboseWarningDialog(java.awt.Frame parent, String title, String header, String errMessage, ArrayDataModel model) {
        super(parent, true);
        initComponents();
        messageHeader.setText(header);
        messageArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        messageArea.setText(errMessage);
        this.setTitle(title);

        if (parent != null) {
            centerOnParent();
        } else {
            centerOnScreen();
        }

        File errDumpFile = new File(model.getOutputDir(), "robin.error.txt");
        try {
            FileWriter writer = new FileWriter(errDumpFile);
            writer.write(errMessage);
            writer.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        this.setVisible(true);
    }
    
    public synchronized void setDontExit() {
        dontExit.set(true);
    }

    private void centerOnParent() {
        Dimension parentDim = getParent().getSize();
        Point parentLoc = getParent().getLocation();
        Dimension myDim = getSize();
        
        int myX = (parentDim.width / 2 + parentLoc.x) - myDim.width / 2;
        int myY = (parentDim.height / 2 + parentLoc.y) - myDim.height / 2;
        
        setLocation(myX, myY);        
    }
    
    private void centerOnScreen() {
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
	this.setLocation(d.width / 2 - this.getWidth() / 2, d.height / 2 - this.getHeight() / 2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageHeader = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        messageHeader.setText("");

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        messageArea.setEditable(false);
        jScrollPane1.setViewportView(messageArea);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jButton1))
                    .add(messageHeader, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                    .add(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(messageHeader)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
    System.out.println("dontExit is "+dontExit.get());
    
    if (dontExit.get()) {
        this.setVisible(false);        
    } else { 
        System.exit(1);
    }
}//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
    VerboseWarningDialog dialog = new VerboseWarningDialog(new javax.swing.JFrame(),"Titel",  "TEST", "ALLES KAPUTT hihaiiiggregvccv");                
    }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane messageArea;
    private javax.swing.JLabel messageHeader;
    // End of variables declaration//GEN-END:variables

    public void windowOpened(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosing(WindowEvent e) {
        this.dispose();
    }

    public void windowClosed(WindowEvent e) {
       // throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

}
